// Code generated by mockery v1.0.0. DO NOT EDIT.

package main

import mock "github.com/stretchr/testify/mock"

// MockCompany is an autogenerated mock type for the Company type
type MockCompany struct {
	mock.Mock
}

type InfoArgs struct {
	Name         string
	NameAnything bool
}

type InfoReturns struct {
	Zip      string
	Address  string
	Phone    string
	Employee int
}

type InfoExpectation struct {
	Args    InfoArgs
	Returns InfoReturns
}

func (_m *MockCompany) ApplyInfoExpectation(e InfoExpectation) {
	var args []interface{}
	if e.Args.NameAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.Name)
	}
	_m.On("Info", args...).Return(e.Returns.Zip, e.Returns.Address, e.Returns.Phone, e.Returns.Employee)
}

func (_m *MockCompany) ApplyInfoExpectations(expectations []InfoExpectation) {
	for _, e := range expectations {
		_m.ApplyInfoExpectation(e)
	}
}

// Info provides a mock function with given fields: name
func (_m *MockCompany) Info(name string) (string, string, string, int) {
	ret := _m.Called(name)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 string
	if rf, ok := ret.Get(2).(func(string) string); ok {
		r2 = rf(name)
	} else {
		r2 = ret.Get(2).(string)
	}

	var r3 int
	if rf, ok := ret.Get(3).(func(string) int); ok {
		r3 = rf(name)
	} else {
		r3 = ret.Get(3).(int)
	}

	return r0, r1, r2, r3
}
